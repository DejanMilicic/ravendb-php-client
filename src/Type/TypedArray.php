<?php

namespace RavenDB\Type;

class TypedArray extends \ArrayObject implements \JsonSerializable
{
    protected string $type;

    public static function forType(string $type): self
    {
        return new self($type);
    }

    public function getType(): string
    {
        return $this->type;
    }

    protected function __construct(string $type)
    {
        $this->type = $type;

        if (!$this->isSimpleType()) {
            if (!class_exists($type)) {
                throw new \TypeError(
                    sprintf("Typed array cant be instantiated. CLass: >> %s <<  does not exists! ", $this->type)
                );
            }
        }

        parent::__construct();
    }

    public function offsetSet($key, $value)
    {
        if ($this->isSimpleType()) {
            if ($this->typeIsString()) {
                if (is_string($value)) {
                    throw new \TypeError(
                        sprintf("Only values of type string are supported")
                    );
                }
            }
        } else {
            if (! $value instanceof $this->type) {
                throw new \TypeError(
                    sprintf("Only values of type %s are supported", $this->type)
                );
            }
        }
        parent::offsetSet($key, $value); // TODO: Change the autogenerated stub
    }

    public function jsonSerialize(): array
    {
        return $this->getArrayCopy();
    }

    /**
     * @return bool
     */
    protected function isSimpleType(): bool
    {
        return in_array($this->type, ['string']);
    }

    private function typeIsString(): bool
    {
        return $this->type == 'string';
    }
}
