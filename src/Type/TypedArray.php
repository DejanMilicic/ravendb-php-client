<?php

namespace RavenDB\Type;

use RavenDB\Extensions\JsonExtensions;
use Symfony\Component\Serializer\Exception\ExceptionInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;

class TypedArray extends \ArrayObject implements \JsonSerializable
{
    protected string $type;

    public static function forType(string $type): self
    {
        return new self($type);
    }

    protected function __construct(string $type)
    {
        $this->type = $type;

        if (!class_exists($type)) {
            throw new \TypeError(
                sprintf("Typed array cant be instantiated. CLass: >> %s <<  does not exists! ", $this->type)
            );
        }

        parent::__construct();
    }

    /**
     * @throws ExceptionInterface
     */
    public function addItemFromData(array $data): void
    {
        $serializer = JsonExtensions::getDefaultEntityMapper();

        $object = $serializer->denormalize($data, $this->type);
        parent::append($object);
    }

    /**
     * @throws ExceptionInterface
     */
    public function addItemsFromData(array $items): void
    {
        foreach ($items as $data) {
            $this->addItemFromData($data);
        }
    }

    public function denormalize(DenormalizerInterface $denormalizer, $data, string $format = null, array $context = [])
    {
        $this->addItemsFromData($data);
    }

    public function offsetSet($key, $value)
    {
        if (! $value instanceof $this->type) {
            throw new \TypeError(
                sprintf("Only values of type %s are supported", $this->type)
            );
        }
        parent::offsetSet($key, $value); // TODO: Change the autogenerated stub
    }

    public function jsonSerialize(): array
    {
        return $this->getArrayCopy();
    }
}
