<?php

namespace RavenDB\Type;

class TypedArray extends \ArrayObject implements TypedArrayInterface, \JsonSerializable
{
    protected string $type;

    public static function forType(string $type): self
    {
        return new self($type);
    }

    public function getType(): string
    {
        return $this->type;
    }

    protected function __construct(string $type)
    {
        $this->type = $type;

        if (!class_exists($type)) {
            throw new \TypeError(
                sprintf("Typed array cant be instantiated. CLass: >> %s <<  does not exists! ", $this->type)
            );
        }

        parent::__construct();
    }

    protected function validateValue($value): void
    {
        if (! $value instanceof $this->type) {
            throw new \TypeError(
                sprintf("Only values of type %s are supported", $this->type)
            );
        }
    }

    public function offsetSet($key, $value)
    {
        $this->validateValue($value);
        parent::offsetSet($key, $value); // TODO: Change the autogenerated stub
    }

    public function removeValue($value): void
    {
        if(($key = array_search($value, $this->getArrayCopy(), true)) !== FALSE) {
            $this->offsetUnset($key);
        }
    }

    public function prepend($value): void
    {
        $this->validateValue($value);

        $currentArray = $this->getArrayCopy();
        array_unshift($currentArray, $value);

        $this->exchangeArray($currentArray);
    }

    public function clear(): void
    {
        foreach ($this as $key => $value) {
            $this->offsetUnset($key);
        }
    }

    public function isEmpty(): bool
    {
        return $this->count() == 0;
    }

    public function isNotEmpty(): bool
    {
        return $this->count() > 0;
    }

    public function first()
    {
        return $this->offsetGet(array_key_first($this->getArrayCopy()));
    }

    public function last()
    {
        return $this->offsetGet(array_key_last($this->getArrayCopy()));
    }

    public function jsonSerialize(): array
    {
        return $this->getArrayCopy();
    }
}
